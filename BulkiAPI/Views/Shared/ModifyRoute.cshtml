@model BulkiAPI.Models.Route
@using Newtonsoft.Json

<script src="~/Scripts/jquery-ui.js"></script>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<link href="~/Content/jquery-ui.structure.css" rel="stylesheet" />
<link href="~/Content/jquery-ui.theme.css" rel="stylesheet" />

<style>
    #map {
        height: 100%;
        width: 100%;
    }
</style>

<div class="modal fade" id="modal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-large" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Modify?</h2>
                <button type="button" class="close" data-dismiss="modal" arial-label="Close"></button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "updateForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()
                    @Html.HiddenFor(model => model.Id)
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(model => model.SourceAddress, new { @class = "control-label" })
                                @Html.EditorFor(model => model.SourceAddress, new { htmlAttributes = new { @class = "form-control", @id = "start" } })
                                @Html.ValidationMessageFor(model => model.SourceAddress, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.DestinationAddress, new { @class = "control-label" })
                                @Html.EditorFor(model => model.DestinationAddress, new { htmlAttributes = new { @class = "form-control", @id = "end" } })
                                @Html.ValidationMessageFor(model => model.DestinationAddress, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <button id="calculateDistance" type="button" class="btn btn-success">Calculate distance</button>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Distance, new { @class = "control-label text-muted" })
                                @Html.EditorFor(model => model.Distance, new { htmlAttributes = new { @class = "form-control", @id = "distance", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Distance, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Price, new { @class = "control-label" })
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @id="priceInput" } })
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Date, new { @class = "control-label" })
                                @Html.EditorFor(model => model.Date, "{0:dd.MM.yyyy}", new { htmlAttributes = new { @class = "date-picker form-control", @id = "datepicker", @Value = Model.Date.ToString("yyyy-MM-dd") } })
                                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <button id="modify" data-url="modify" type="submit" class="btn btn-primary">Modify</button>
                            </div>
                        </div>
                        <div class="col-md-9" style="height:500px">
                            <div id="map">
                            </div>
                        </div>
                    </div>
                }

                <div class="modal-footer">
                    <button id="dismiss" type="button" class="btn btn-secondary" data-dismiss="modal">Abort</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        $("#modal").modal();
        loadGoogleMap();

        $('#distance').val(@Model.Distance);
        })();


    $("#modify").click(function (ev) {

        ev.preventDefault();
        ev.stopPropagation();

        $('#priceInput').val($('#priceInput').val().replace(',', '.').replace(' ', ''));

        $.ajax({
            url: $(this).data('url'),
            type: 'POST',
            cache: false,
            data: $('#updateForm').serialize(),
            success: function (response) {
                location.reload(true);
                $("#dismiss").click();
            },
            error: function (response) {
                console.log(response);
                window.location.href = '@Url.Action("Error","Home")';
            }
        });

        $("#dismiss").click();

    });

    function initMap() {
        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer;

        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 7,
            center: { lat: 21.01, lng: 52.22 }
        });

        directionsDisplay.setMap(map);

        var onChangeHandler = function () {
            console.log($('#start').val() + " " + $('#end').val());

            if ($('#start').val() == "" || $('#end').val() == "")
                return;
            calculateAndDisplayRoute(directionsService, directionsDisplay);
        };

        document.getElementById('calculateDistance').addEventListener('click', onChangeHandler);
    }

    function calculateAndDisplayRoute(directionsService, directionsDisplay) {
        directionsService.route({
            origin: document.getElementById('start').value,
            destination: document.getElementById('end').value,
            travelMode: 'DRIVING'
        }, function (response, status) {
            if (status === 'OK') {
                directionsDisplay.setDirections(response);

                $('#distance').val(response.routes[0].legs[0].distance.value / 1000);
            }
            else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }

    function loadGoogleMap()
    {
        var script = document.createElement('script');
        script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBBGGv-ss38J8dOBNtrDlYr97Ijhen_Ht0&callback=initMap&sensor=false"
        script.type = "text/javascript";
        document.getElementsByTagName("head")[0].appendChild(script);
    }

</script>
